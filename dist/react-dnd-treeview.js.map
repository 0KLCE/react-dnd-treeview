{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap c685eaa94e615aeaa952","webpack:///./src/TreeView.tsx","webpack:///external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack:///./src/InsertTarget.tsx","webpack:///external \"react-dnd\"","webpack:///./src/DraggedNode.tsx","webpack:///./src/InsertTarget.styles.ts","webpack:///./src/Node.tsx","webpack:///external {\"root\":\"Immutable\",\"commonjs2\":\"immutable\",\"commonjs\":\"immutable\",\"amd\":\"immutable\"}","webpack:///external \"classnames\""],"names":[],"mappings":"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","file":"react-dnd-treeview.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"), require(\"react-dnd\"), require(\"immutable\"), require(\"classnames\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\", \"react-dnd\", \"immutable\", \"classnames\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"react-dnd-treeview\"] = factory(require(\"react\"), require(\"react-dnd\"), require(\"immutable\"), require(\"classnames\"));\n\telse\n\t\troot[\"react-dnd-treeview\"] = factory(root[\"React\"], root[\"react-dnd\"], root[\"Immutable\"], root[\"classnames\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_9__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap c685eaa94e615aeaa952\n **/","import React from \"react\";\r\nimport Immutable from \"immutable\";\r\nimport {\r\n  DragSource,\r\n  DragSourceConnector,\r\n  DragSourceMonitor,\r\n  DragSourceSpec,\r\n  ConnectDragSource,\r\n  DropTarget,\r\n  DropTargetConnector,\r\n  DropTargetMonitor,\r\n  DropTargetSpec,\r\n  ConnectDropTarget,\r\n} from \"react-dnd\";\r\n\r\nimport { TreeNode, TreeNodeID, TreeViewProps } from \"./react-dnd-treeview.d.ts\";\r\nimport \"./InsertTarget\";\r\nimport { TreeViewItemList } from \"./Node\";\r\n\r\n\r\nexport const TreeView: React.Factory<TreeViewProps> =\r\n  (props: TreeViewProps) => (\r\n    <div className={ props.classNames.treeView }>\r\n      <TreeViewItemList\r\n        parentNode={ null }\r\n        nodes={ props.rootNodes }\r\n        renderNode={ props.renderNode }\r\n        classNames={ props.classNames }\r\n        onMoveNode={ props.onMoveNode }\r\n        />\r\n    </div>\r\n  );\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/TreeView.tsx\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}\n ** module id = 2\n ** module chunks = 0\n **/","import React from \"react\";\r\nimport {\r\n  DropTarget,\r\n  DropTargetConnector,\r\n  DropTargetMonitor,\r\n  DropTargetSpec,\r\n  ConnectDropTarget,\r\n} from \"react-dnd\";\r\n\r\nimport { TreeNode, TreeNodeID, MoveTreeNode } from \"./react-dnd-treeview.d.ts\";\r\nimport { TYPE, DraggedNode } from \"./DraggedNode\";\r\nimport { Styles } from \"./InsertTarget.styles.ts\";\r\n\r\nexport interface TreeViewInsertTargetProps {\r\n  readonly parentNode: TreeNode;\r\n  readonly parentChildIndex: number;\r\n  readonly precedingNode: TreeNode;\r\n  readonly insertBefore: boolean;\r\n  readonly onMoveNode: MoveTreeNode;\r\n}\r\n\r\ninterface TreeViewInsertTargetDropProps {\r\n  readonly connectDropTarget: ConnectDropTarget;\r\n  readonly canDrop: boolean;\r\n  readonly isDropping: boolean;\r\n}\r\n\r\nconst TreeViewInsertTarget = (props: TreeViewInsertTargetProps & TreeViewInsertTargetDropProps) =>\r\n  props.connectDropTarget(\r\n    <div\r\n      style={\r\n        Object.assign(\r\n          {},\r\n          props.insertBefore ? Styles.insertBeforeTarget : Styles.insertAfterTarget,\r\n          props.canDrop ? Styles.insertTargetCanDrop : {},\r\n          props.isDropping ? Styles.insertTargetDropping : {}\r\n        )\r\n      }\r\n      >\r\n      <div style={ props.isDropping ? Styles.insertTargetMarkerDropping : {} } />\r\n    </div>\r\n  );\r\n\r\nconst handleCanDrop = (\r\n  props: TreeViewInsertTargetProps,\r\n  monitor: DropTargetMonitor,\r\n  item: DraggedNode\r\n) => (\r\n    !(\r\n      props.parentNode === item.parentNode &&\r\n      (\r\n        props.parentChildIndex === item.parentChildIndex ||\r\n        props.parentChildIndex === item.parentChildIndex + 1\r\n      )\r\n    ) &&\r\n    !item.allSourceIDs.contains(props.parentNode ? props.parentNode.id : null)\r\n  );\r\n\r\nconst handleDrop = (\r\n  props: TreeViewInsertTargetProps,\r\n  monitor: DropTargetMonitor,\r\n  component: React.Component<TreeViewInsertTargetProps, any>,\r\n  item: DraggedNode\r\n) => (\r\n    props.onMoveNode({\r\n      oldParentNode: item.parentNode,\r\n      oldParentChildIndex: item.parentChildIndex,\r\n      oldPrecedingNode: item.precedingNode,\r\n      node: item.node,\r\n      newParentNode: props.parentNode,\r\n      newParentChildIndex: props.parentChildIndex,\r\n      newPrecedingNode: props.precedingNode,\r\n    }),\r\n    ({\r\n      parentNode: props.parentNode,\r\n      parentChildIndex: props.parentChildIndex,\r\n    })\r\n  );\r\n\r\nconst nodeTarget: DropTargetSpec<TreeViewInsertTargetProps> = {\r\n  drop: (props, monitor, component) => monitor.didDrop()\r\n    ? undefined // some child already handled drop\r\n    : handleDrop(props, monitor, component, monitor.getItem() as DraggedNode),\r\n  canDrop: (props, monitor) => handleCanDrop(props, monitor, monitor.getItem() as DraggedNode),\r\n};\r\n\r\nconst collectNodeDropProps =\r\n  (connect: DropTargetConnector, monitor: DropTargetMonitor): TreeViewInsertTargetDropProps => ({\r\n    connectDropTarget: connect.dropTarget(),\r\n    canDrop: monitor.canDrop(),\r\n    isDropping: monitor.isOver({ shallow: true }) && monitor.canDrop(),\r\n  });\r\n\r\nexport const DroppableTreeViewInsertTarget =\r\n  DropTarget([TYPE], nodeTarget, collectNodeDropProps)(TreeViewInsertTarget);\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/InsertTarget.tsx\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"react-dnd\"\n ** module id = 4\n ** module chunks = 0\n **/","import Immutable from \"immutable\";\r\n\r\nimport { TreeNode, TreeNodeID } from \"./react-dnd-treeview.d.ts\";\r\n\r\nexport const TYPE = \"TreeNode\";\r\n\r\nexport interface DraggedNode {\r\n  node: TreeNode;\r\n  allSourceIDs: Immutable.Set<TreeNodeID>;\r\n  parentNode: TreeNode;\r\n  parentChildIndex: number;\r\n  precedingNode: TreeNode;\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/DraggedNode.tsx\n **/","import React from \"react\";\r\n\r\nnamespace NormalStyles {\r\n\r\n  export const insertTarget: React.CSSProperties = {\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n    height: \"1em\",\r\n    position: \"absolute\",\r\n    zIndex: 1,\r\n    display: \"none\",\r\n  };\r\n\r\n  export const insertBeforeTarget: React.CSSProperties = {\r\n    top: \"-0.5em\",\r\n  };\r\n\r\n  export const insertAfterTarget: React.CSSProperties = {\r\n    bottom: \"-0.5em\",\r\n  };\r\n\r\n  export const insertTargetCanDrop: React.CSSProperties = {\r\n    display: \"flex\",\r\n  };\r\n\r\n  export const insertTargetDropping: React.CSSProperties = {\r\n  };\r\n\r\n  export const insertTargetMarkerDropping: React.CSSProperties = {\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n    height: \"3px\",\r\n    borderRadius: \"2px\",\r\n    background: \"linear-gradient(90deg, gray, white)\",\r\n    alignSelf: \"center\",\r\n  };\r\n\r\n}\r\n\r\nnamespace DebugStyles {\r\n\r\n  export const insertTarget: React.CSSProperties = {\r\n    opacity: 0.5,\r\n  };\r\n\r\n  export const insertTargetCanDrop: React.CSSProperties = {\r\n  };\r\n\r\n  export const insertTargetDropping: React.CSSProperties = {\r\n    opacity: 0.9,\r\n  };\r\n\r\n  export const insertBeforeTarget: React.CSSProperties = {\r\n    backgroundColor: \"#ffffdd\",\r\n  };\r\n\r\n  export const insertAfterTarget: React.CSSProperties = {\r\n    backgroundColor: \"#ffddff\",\r\n  };\r\n\r\n}\r\n\r\nconst isDebug = false;\r\n\r\nexport namespace Styles {\r\n\r\n  export const insertBeforeTarget = Object.assign(\r\n    {},\r\n    NormalStyles.insertTarget,\r\n    NormalStyles.insertBeforeTarget,\r\n    isDebug ? DebugStyles.insertTarget : {},\r\n    isDebug ? DebugStyles.insertBeforeTarget : {}\r\n  );\r\n\r\n  export const insertAfterTarget = Object.assign(\r\n    {},\r\n    NormalStyles.insertTarget,\r\n    NormalStyles.insertAfterTarget,\r\n    isDebug ? DebugStyles.insertTarget : {},\r\n    isDebug ? DebugStyles.insertAfterTarget : {}\r\n  );\r\n\r\n  export const insertTargetCanDrop: React.CSSProperties = Object.assign(\r\n    {},\r\n    NormalStyles.insertTargetCanDrop,\r\n    isDebug ? DebugStyles.insertTargetCanDrop : {}\r\n  );\r\n\r\n  export const insertTargetDropping: React.CSSProperties = Object.assign(\r\n    {},\r\n    NormalStyles.insertTargetDropping,\r\n    isDebug ? DebugStyles.insertTargetDropping : {}\r\n  );\r\n\r\n  export const insertTargetMarkerDropping: React.CSSProperties =\r\n    NormalStyles.insertTargetMarkerDropping;\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/InsertTarget.styles.ts\n **/","import Immutable from \"immutable\";\r\nimport classnames from \"classnames\";\r\nimport React from \"react\";\r\nimport {\r\n  DragSource,\r\n  DragSourceConnector,\r\n  DragSourceMonitor,\r\n  DragSourceSpec,\r\n  ConnectDragSource,\r\n} from \"react-dnd\";\r\n\r\nimport { TreeNode, TreeNodeID, TreeNodeList, MoveTreeNode, TreeViewClassNames } from \"./react-dnd-treeview.d.ts\";\r\nimport { DraggedNode, TYPE } from \"./DraggedNode\";\r\nimport { DroppableTreeViewInsertTarget } from \"./InsertTarget\";\r\n\r\nexport interface TreeViewItemProps {\r\n  readonly parentNode: TreeNode;\r\n  readonly parentChildIndex: number;\r\n  readonly precedingNode: TreeNode;\r\n  readonly node: TreeNode;\r\n  readonly classNames: TreeViewClassNames;\r\n  readonly renderNode: (node: TreeNode) => JSX.Element;\r\n  readonly onMoveNode: MoveTreeNode;\r\n}\r\n\r\ninterface TreeViewItemDragProps {\r\n  readonly connectDragSource: ConnectDragSource;\r\n  readonly isDragging: boolean;\r\n}\r\n\r\nconst TreeViewItem: (props: TreeViewItemProps & TreeViewItemDragProps) => React.ReactElement<TreeViewItemProps> =\r\n  (props) => (\r\n    props.connectDragSource<TreeViewItemProps>(\r\n      <div\r\n        className={\r\n          classnames(props.classNames.node, {\r\n            [props.classNames.nodeDragging]: props.isDragging,\r\n          }) }\r\n        key={ props.node.id }\r\n        >\r\n        <div>\r\n          { props.renderNode(props.node) }\r\n        </div>\r\n        {\r\n          props.node.isCollapsed\r\n            ? null\r\n            :\r\n            <div className={ props.classNames.nodeChildren }>\r\n              { props.node.children\r\n                ? <TreeViewItemList\r\n                  parentNode={ props.node }\r\n                  nodes={ props.node.children }\r\n                  classNames={ props.classNames }\r\n                  renderNode={ props.renderNode }\r\n                  onMoveNode={ props.onMoveNode }\r\n                  />\r\n                : null }\r\n            </div>\r\n        }\r\n      </div>\r\n    )\r\n  );\r\n\r\nconst gatherNodeIDs = (node: TreeNode): Immutable.Set<TreeNodeID> =>\r\n  Immutable.Set.of(node.id).union(node.children ? node.children.items.flatMap(gatherNodeIDs) : Immutable.List<string>()).toSet();\r\n\r\nconst nodeSource: DragSourceSpec<TreeViewItemProps> = {\r\n  beginDrag: (props, monitor, component) => ({\r\n    node: props.node,\r\n    allSourceIDs: gatherNodeIDs(props.node),\r\n    parentNode: props.parentNode,\r\n    parentChildIndex: props.parentChildIndex,\r\n    precedingNode: props.precedingNode,\r\n  } as DraggedNode),\r\n};\r\n\r\nconst collectNodeDragProps: (connect: DragSourceConnector, monitor: DragSourceMonitor) => TreeViewItemDragProps =\r\n  (connect, monitor) => ({\r\n    connectDragSource: connect.dragSource(),\r\n    isDragging: monitor.isDragging(),\r\n  });\r\n\r\nexport const DraggableTreeViewItem = DragSource(TYPE, nodeSource, collectNodeDragProps)(TreeViewItem);\r\n\r\nexport interface TreeViewItemListProps {\r\n  readonly parentNode: TreeNode;\r\n  readonly nodes: TreeNodeList;\r\n  readonly renderNode: (node: TreeNode) => JSX.Element;\r\n  readonly classNames: TreeViewClassNames;\r\n  readonly onMoveNode: MoveTreeNode;\r\n}\r\n\r\nconst nodesWithPredecessors = (nodes: Immutable.Iterable<number, TreeNode>):\r\n  Immutable.Iterable<number, { node: TreeNode, precedingNode: TreeNode }> =>\r\n  nodes\r\n    .toIndexedSeq()\r\n    .zipWith(\r\n    (node, predecessor) => ({ node, precedingNode: predecessor }),\r\n    Immutable.Seq.of<TreeNode>(null)\r\n      .concat(nodes)\r\n    );\r\n\r\n// TODO: add a mechanism to apply the CSS equivalent:\r\n// .nodePositioningWrapper:hover {\r\n//   /* otherwise drop targets interfere with drag start */\r\n//   z-index: 2;\r\n// }\r\n\r\nexport const TreeViewItemList = (props: TreeViewItemListProps) => (\r\n  <div className={ props.classNames.nodeList }>\r\n    {\r\n      nodesWithPredecessors(props.nodes.items).map((node, index) =>\r\n        <div\r\n          key={ node.node.id }\r\n          style={ { position: \"relative\" } }\r\n          className={ props.classNames.nodePositioningWrapper }\r\n          >\r\n          {\r\n            index === 0\r\n              ? <DroppableTreeViewInsertTarget\r\n                insertBefore={ true }\r\n                parentNode={ props.parentNode }\r\n                parentChildIndex={ index }\r\n                precedingNode={ null }\r\n                onMoveNode={ props.onMoveNode }\r\n                />\r\n              : null\r\n          }\r\n          <DroppableTreeViewInsertTarget\r\n            insertBefore={ false }\r\n            parentNode={ props.parentNode }\r\n            parentChildIndex={ index + 1 }\r\n            precedingNode={ node.node }\r\n            onMoveNode={ props.onMoveNode }\r\n            />\r\n          <DraggableTreeViewItem\r\n            parentNode={ props.parentNode }\r\n            parentChildIndex={ index }\r\n            precedingNode={ node.precedingNode }\r\n            node={ node.node }\r\n            classNames={ props.classNames }\r\n            renderNode={ props.renderNode }\r\n            onMoveNode={ props.onMoveNode }\r\n            />\r\n        </div>\r\n      )\r\n    }\r\n  </div>\r\n);\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Node.tsx\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":\"Immutable\",\"commonjs2\":\"immutable\",\"commonjs\":\"immutable\",\"amd\":\"immutable\"}\n ** module id = 8\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_9__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"classnames\"\n ** module id = 9\n ** module chunks = 0\n **/"],"sourceRoot":""}